<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.cocoaTouchApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Description</key>
	<string>This template provides a starting point for an application that integrates with Facebook, using the Facebook SDK.</string>
	<key>Identifier</key>
	<string>com.facebook.ios.singleViewApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Definitions</key>
	<dict>

		
		<!-- -->
		<!-- ViewController.h definitions -->
		<!-- -->
		
		<!-- Nothing else needed in ViewController interface -->
		<key>___VARIABLE_classPrefix:identifier___ViewController.h:viewControllerInterface:setup</key>
		<string></string>
		

		<!-- -->
		<!-- AppDelegate.h definitions -->
		<!-- -->
		
		<!-- Intentionally set to blank so we can express most of the class in one fell swoop -->
		<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:ivars</key>
		<string></string>
		<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:window</key>
		<string></string>
		
		<!-- Main stuff for AppDelegate.h -->
		<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:class</key>
		<string>#import &lt;FBiOSSDK/FacebookSDK.h&gt;

@class ___VARIABLE_classPrefix:identifier___ViewController;

@interface ___VARIABLE_classPrefix:identifier___AppDelegate : UIResponder&lt;UIApplicationDelegate&gt;

@property (strong, nonatomic) UIWindow *window;
@property (strong, nonatomic) ___VARIABLE_classPrefix:identifier___ViewController *viewController;
@property (strong, nonatomic) FBSession *session;
</string>

		<!-- -->
		<!-- ViewController.m definitions -->
		<!-- -->

		<!-- interface stuff -->

		<key>___VARIABLE_classPrefix:identifier___ViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___ViewController ()

@property (strong, nonatomic) IBOutlet FBProfilePictureView *profilePic;
@property (strong, nonatomic) IBOutlet UIBarButtonItem *buttonLoginLogout;
@property (strong, nonatomic) IBOutlet UILabel *labelFirstName;
@property (strong, nonatomic) FBRequestConnection *requestConnection;

- (IBAction)performLoginLogout:(id)sender;

- (void)updateForSessionChange;

@end
                </string>

		<!-- implementation stuff -->
		
		<key>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewControllerBody</key>
		<string>
- (void)viewDidLoad
{    
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.

    self.profilePic.pictureSize = FBProfilePictureSizeLarge;
    
    // FBSample logic
    // bootstrap call to updateForSessionChange gets a fresh new session object
    [self updateForSessionChange];
    
}


// FBSample logic
// main helper method to react to session changes, including creation of session
// object when one has gone invalid, or at init time
- (void)updateForSessionChange {
    // get the app delegate
    ___VARIABLE_classPrefix:identifier___AppDelegate *appDelegate = [[UIApplication sharedApplication]delegate];
    if (appDelegate.session.isValid) {        
        // valid account UI
        
        // Once logged in, get "my" information.
        FBRequestConnection *newConnection = 
        [FBRequest connectionWithSession: appDelegate.session 
                               graphPath:@"me" 
                       completionHandler:
         ^(FBRequestConnection *connection, id result, NSError *error) {
             
             // Request completed...
             
             if (connection != self.requestConnection) {
                 // not the completion we were waiting for...
                 return;
             }
             
             self.requestConnection = nil;
             NSString *text, *fbid;
             if (error) {
                 text = error.localizedDescription;
                 fbid = nil;   // default profile pic
             } else {
                 NSDictionary *dictionary = (NSDictionary *)result;        
                 NSString *firstName = (NSString *)[dictionary objectForKey:@"first_name"];
                 text = [NSString stringWithFormat:@"Yo %@, make this app yours!", firstName];
                 fbid = (NSString *)[dictionary objectForKey:@"id"];
             }
             
             self.labelFirstName.text = text;
             profilePic.userID = fbid;
             
         }];
        
        // If there's an outstanding connection, just cancel
        [self.requestConnection cancel];
        
        [newConnection start];
        self.requestConnection = newConnection;
        
        buttonLoginLogout.title = @"Logout";  
        
    } else {
        
        // invalid account UI, or just logged out.
        buttonLoginLogout.title = @"Login"; 
        labelFirstName.text = @"&lt;Press Login&gt;";
        profilePic.userID = nil; // default profile pic
        
        // create a fresh session object in case of subsequent login
        appDelegate.session = [[FBSession alloc] init]; 
        if (appDelegate.session.status == FBSessionStateLoadedValidToken) {
            // even though we had a cached token, we need to login to make the session usable
            [appDelegate.session loginWithCompletionHandler:^(FBSession *session, 
                                                              FBSessionState status, 
                                                              NSError *error) {
                [self updateForSessionChange];
            }];
        }
    }
}


// FBSample logic
// handler for button click, logs sessions in or out
- (IBAction)performLoginLogout:(id)sender {
    // get the app delegate
    ___VARIABLE_classPrefix:identifier___AppDelegate *appDelegate = [[UIApplication sharedApplication]delegate];
    
    // this button's job is to flip-flop the session from valid to invalid
    if (appDelegate.session.isValid) {
        // if a user logs out explicitly, we logout the session, which deletes any cached token 
        [appDelegate.session logout];
    } else {
        // in order to get the FBSession object up and running
        [appDelegate.session loginWithCompletionHandler:^(FBSession *session, 
                                                          FBSessionState status, 
                                                          NSError *error) {
            [self updateForSessionChange];
        }];
    } 
}

- (void)viewDidUnload
{
    [self setButtonLoginLogout:nil];
    [self setButtonLoginLogout:nil];
    [self setLabelFirstName:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
    
    self.profilePic.userID = nil;
    self.profilePic = nil;
}

                </string>


		<!-- -->
		<!-- AppDelegate.m definitions -->
		<!-- -->

		<!-- interface stuff -->

		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___AppDelegate ()
@end		  
		</string>

		<!-- implementation stuff -->

		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationWillTerminate</key>
		<string></string>
		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationWillTerminate:comments</key>
		<string></string>


		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions</key>
		<dict>
			<key>Beginning</key>
			<string>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // BUG:
    // Nib files require the type to have been loaded before they can do the
    // wireup successfully.  
    // http://stackoverflow.com/questions/1725881/unknown-class-myclass-in-interface-builder-file-error-at-runtime
    [FBProfilePictureView class];

    self.window = ___RP___[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]]___AR___;
    // Override point for customization after application launch.</string>
			<key>End</key>
			<string>    [self.window makeKeyAndVisible];
    return YES;
}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>


		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:appDelegateBody</key>
		<string>
// FBSample logic
// if we have a valid session at the time of openURL call, we handle Facebook transitions
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
    // attempt to extract a token from the url
    return [self.session handleOpenURL:url]; 
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    // FBSample logic
    // if the app is going away, we invalidate the token if present
    [self.session invalidate];
}

                </string>




		<!-- -->
		<!-- Package stuff -->
		<!-- -->
		
		
		<key>___PACKAGENAME___-Info.plist:FacebookAppID</key>
		<string>&lt;key&gt;FacebookAppID&lt;/key&gt;
	&lt;string&gt;___VARIABLE_fbappId___&lt;/string&gt;
</string>

		<key>___PACKAGENAME___-Info.plist:FacebookAppUrlScheme</key>
		<string>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
	&lt;array&gt;
		&lt;dict&gt;
			&lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
			&lt;array&gt;
				&lt;string&gt;fb___VARIABLE_fbappId___&lt;/string&gt;
			&lt;/array&gt;
		&lt;/dict&gt;
	&lt;/array&gt;</string>

	</dict>


        <!-- -->
        <!-- End of definitions, onto expansion into Nodes -->
        <!-- -->

	
	<key>Nodes</key>
	<array>
		<string>___VARIABLE_classPrefix:identifier___ViewController.h:viewControllerInterface:setup</string>
		
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:import:___VARIABLE_classPrefix:identifier___ViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:import:___VARIABLE_classPrefix:identifier___AppDelegate.h</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:private</string>
		
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:synthesize:buttonLoginLogout</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:synthesize:labelFirstName</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:synthesize:profilePic</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:synthesize:requestConnection = _requestConnection</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:dealloc:_buttonLoginLogout</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:dealloc:_labelFirstName</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:dealloc:_profilePic</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:dealloc:_requestConnection</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewControllerBody</string>
		<!-- inherited from ancestor -->
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewDidLoad</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:fullBody</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:class</string>

		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___ViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:private</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:viewController = _viewController</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:session = _session</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_window</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_viewController</string>
		<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:appDelegateBody</string>
		
		<string>___PACKAGENAME___-Info.plist:FacebookAppID</string>
		<string>___PACKAGENAME___-Info.plist:FacebookAppUrlScheme</string>
		
	</array>
	
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>fbappId</string>
			<key>Description</key>
			<string>The platform application id</string>
			<key>Default</key>
			<string>0</string>
			<key>Name</key>
			<string>Facebook App Id</string>
			<key>Type</key>
			<string>text</string>
			<key>NotPersisted</key>
			<true/>
			<key>Required</key>
			<true/>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
    self.viewController = ___RP___[[___VARIABLE_classPrefix:identifier___ViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___ViewController_iPhone" bundle:nil]___AR___;
} else {
    self.viewController = ___RP___[[___VARIABLE_classPrefix:identifier___ViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___ViewController_iPad" bundle:nil]___AR___;
}
self.window.rootViewController = self.viewController;</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___ViewController_iPad.xib</key>
							<dict>
								<key>Path</key>
								<string>ViewControlleriPad.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___ViewController_iPhone.xib</key>
							<dict>
								<key>Path</key>
								<string>ViewControlleriPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___ViewController_iPhone.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___ViewController_iPad.xib</string>
						</array>
					</dict>
				</array>
				<key>iPad</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>self.viewController = ___RP___[[___VARIABLE_classPrefix:identifier___ViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___ViewController" bundle:nil]___AR___;
self.window.rootViewController = self.viewController;</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___ViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>ViewControlleriPad.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___ViewController.xib</string>
						</array>
					</dict>
				</array>
				<key>iPhone</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>self.viewController = ___RP___[[___VARIABLE_classPrefix:identifier___ViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___ViewController" bundle:nil]___AR___;
self.window.rootViewController = self.viewController;</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___ViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>ViewControlleriPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___ViewController.xib</string>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
	<key>Targets</key>
	<array>
		<dict>
			<key>Frameworks</key>
			<array>
				<string>FBiOSSDK</string>
				<string>QuartzCore</string>
			</array>
                        <key>SharedSettings</key>
	                <dict>
                           <key>FRAMEWORK_SEARCH_PATHS</key>
                           <string>~/Library/Developer/FacebookSDK /System/Library/Frameworks</string>
                           <key>LIBRARY_SEARCH_PATHS</key>
                           <string>~/Library/Developer/FacebookSDK/FBiOSSDK.framework /System/Library/Frameworks</string>
                           <key>OTHER_LDFLAGS</key>
                           <string>-lsqlite3.0</string>
                        </dict>
		</dict>
	</array>
</dict>
</plist>
